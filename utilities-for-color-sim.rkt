#lang racket
(provide (all-defined-out))
(define-syntax while
  (syntax-rules ()
    [(while bool operation1 more ... iterator1) (begin (define (iterate)
                                                         (cond [bool (begin operation1
                                                                            more ...
                                                                            iterator1
                                                                            (iterate))]))
                                                       (iterate))]))
(define (zip l1 l2)
  (match (list l1 l2)
    [(list '() _) '()]
    [(list _ '()) '()]
    [(list (cons a b) (cons c d)) (cons (cons a c) (zip b d))]))
(define (string-maker n)
  (string-append "box" (number->string n)))
(define (str-list-maker n)
  (define (helper n lst)
    (if (= n -1)
        lst
        (helper (- n 1) (append (list (string-maker n)) lst))))
  (helper n null))
(define str-lst (str-list-maker 39))

(define co-ordinate-list '((cons 88.5 908.5)
                           (cons 88.5 799.5)
                           (cons 88.5 724.5)
                           (cons 88.5 649.5)
                           (cons 88.5 574.5)
                           (cons 88.5 499.5)
                           (cons 88.5 424.5)
                           (cons 88.5 349.5)
                           (cons 88.5 274.5)
                           (cons 88.5 199.5)
                           (cons 88.5 90.5)
                           (cons 197.5 90.5)
                           (cons 272.5 90.5)
                           (cons 347.5 90.5)
                           (cons 422.5 90.5)
                           (cons 497.5 90.5)
                           (cons 572.5 90.5)
                           (cons 647.5 90.5)
                           (cons 722.5 90.5)
                           (cons 797.5 90.5)
                           (cons 906.5 90.5)
                           (cons 906.5 199.5)
                           (cons 906.5 274.5)
                           (cons 906.5 349.5)
                           (cons 906.5 424.5)
                           (cons 906.5 499.5)
                           (cons 906.5 574.5)
                           (cons 906.5 649.5)
                           (cons 906.5 724.5)
                           (cons 906.5 799.5)
                           (cons 906.5 908.5) 
                           (cons 797.5 908.5)
                           (cons 722.5 908.5)
                           (cons 647.5 908.5)
                           (cons 572.5 908.5)
                           (cons 497.5 908.5)
                           (cons 422.5 908.5)
                           (cons 347.5 908.5)
                           (cons 272.5 908.5)
                           (cons 197.5 908.5)))
(define tagged-hash (make-hash (zip  co-ordinate-list str-lst )))


(define game-player%
  (class object%
    (init-field [playername ""])
    (init-field [balance 1500])
    (init-field [list-of-properties '()]) ;; co-ordinates of all the properties
    ;(init-field [posn '(cons 88.5 908.5)])
    (init-field [bankruptcy #f])
    (super-new)
    (define/public (declare-bankruptcy)
      (if (and (null? list-of-properties) (= 0 balance)) (set! bankruptcy #t) #f))
    (define/public (purchase property) ;;property is an object of class standard property
      (if (<= balance (get-field purchase-price property)) (void)
          (begin
            (set-field! upgrade-count property 1)
            (set-field! rent property (get-field rent0 property)) 
            (set-field! property-owner property playername)
            (set! balance (- balance (get-field purchase-price property)))
            (set! list-of-properties (cons (get-field co-ordinates property) list-of-properties)))))
    (define/public (upgrade-property property)
      (if (and (not (equal? (get-field color property) "white")) (equal? (hash-ref color-sets (get-field color property)) (frequency-str (get-field color property) (color-giver))))
      (if (<= balance (get-field build-house property)) (void)
        (cond [(= 1 (get-field upgrade-count property)) (begin (set! balance (- balance (get-field build-house property))) (send property upgrade))]
              [(= 2 (get-field upgrade-count property)) (begin (set! balance (- balance (get-field build-house property))) (send property upgrade))]
              [(= 3 (get-field upgrade-count property)) (begin (set! balance (- balance (get-field build-house property))) (send property upgrade))]
              [(= 4 (get-field upgrade-count property)) (begin (set! balance (- balance (get-field build-house property))) (send property upgrade))]
              [(= 5 (get-field upgrade-count property)) (begin (set! balance (- balance (get-field build-hotel property))) (send property upgrade))]
              [else (send property upgrade)]))
      (begin ;(displayln "You cannot upgrade a property without full set")
             (void))))
    (define (color-giver) (filter (lambda (y) (not (or (equal? y "white"))))
                                         (map (lambda (x) (get-field color (hash-ref boxes (hash-ref tagged-hash x))))
                                              list-of-properties )))
    (define/public (mortgage property)
      (begin
        (send property sell-to-bank)
        (set! balance (+ balance (get-field mortgage-value property)))
        (set! list-of-properties (remove (get-field co-ordinates property) list-of-properties))))
    (define/public (take-rent property)
      (begin (set! balance (+ balance (get-field rent property)))
             (displayln "RENT-RECIEVED-BY  : ")
             (display "Player : ")
             (displayln playername)
             (display "Balance : ")
             (displayln balance)
             (newline)))
    (define/public (get-out-of-jail)
      (begin (set! balance (- balance 50))
             (displayln "JAIL FINE : 50 ")
             (display "Player : ")
             (displayln playername)
             (display "Balance : ")
             (displayln balance)
             (newline)))
    (define/public (pay-tax)
      (begin 
        (set! balance (- balance (min 200 (* balance 0.1))))
       ; (displayln "You have paid your taxes")
       ; (display "Player : ")
       ; (displayln playername)
       ; (displayln balance)
        ))
    (define/public (supertax)
      (begin
        (set! balance (- balance 200))
        ; (displayln "You have been charged SUPER TAX")
        ;(display "Player : ")
        ;(displayln playername)
        ;(displayln balance)
        ))
    (define/public (wealth)
      (define x (apply + (map (lambda (x) (get-field mortgage-value (hash-ref boxes (hash-ref tagged-hash x)))) list-of-properties)))
      (+ x balance))))
                   
                      
      
    (define color-sets (make-hash  (zip '("orange" "yellow" "brown" "light blue" "red" "pink" "green" "blue") '(3 3 2 3 3 3 3 2))))
      

(define standard-property%
  (class object%
    (init-field [purchase-price 0])
    (init-field [property-owner ""])
    (init-field [property-name ""])
    ;(init-field [auction-value 1])
    (init-field [co-ordinates (cons 0 0)])
    (init-field [color ""])
    (init-field [rent0 0])
    (init-field [rent1 0])
    (init-field [rent2 0])
    (init-field [rent3 0])
    (init-field [rent4 0])
    (init-field [rent 0])
    (init-field [upgrade-count 0])
    (init-field [hotel-rent 0])
    (init-field [number-of-house 0])
    ;(init-field [mortgage #f]) ;;boolean
    (init-field [mortgage-value 0])
    ; (init-field [image 0])
    (init-field [build-hotel 0])
    (init-field [build-house 0])
  
   
    (super-new)
    (define/public (upgrade)
      (cond [(= upgrade-count 0) (begin (set! rent rent0) (set! upgrade-count (+ 1 upgrade-count)))]
            [(= upgrade-count 1) (begin (set! rent rent1) (set! upgrade-count (+ 1 upgrade-count)) (set! number-of-house 1))]
            [(= upgrade-count 2) (begin (set! rent rent2) (set! upgrade-count (+ 1 upgrade-count)) (set! number-of-house 2))]
            [(= upgrade-count 3) (begin (set! rent rent3) (set! upgrade-count (+ 1 upgrade-count)) (set! number-of-house 3))]
            [(= upgrade-count 4) (begin (set! rent rent4) (set! upgrade-count (+ 1 upgrade-count)) (set! number-of-house 4))]
            [(= upgrade-count 5) (begin (set! rent hotel-rent) (set! upgrade-count (+ 1 upgrade-count)))]))
    (define/public (sell-to-bank)
      (cond [(= upgrade-count 0) (begin (set! rent rent0) (set! upgrade-count 0) (set! property-owner ""))]
            [(= upgrade-count 1) (begin (set! rent rent0) (set! upgrade-count 0) (set! mortgage-value (+ mortgage-value (/ build-house 2.0))) (set! property-owner ""))]
            [(= upgrade-count 2) (begin (set! rent rent0) (set! upgrade-count 0) (set! mortgage-value (+ mortgage-value (/ (* 2 build-house) 2.0))) (set! property-owner ""))] 
            [(= upgrade-count 3) (begin (set! rent rent0) (set! upgrade-count 0) (set! mortgage-value (+ mortgage-value (/ (* 3 build-house) 2.0))) (set! property-owner ""))]
            [(= upgrade-count 4) (begin (set! rent rent0) (set! upgrade-count 0) (set! mortgage-value (+ mortgage-value (/ (* 4 build-house) 2.0))) (set! property-owner ""))]
            [(= upgrade-count 5) (begin (set! rent rent0) (set! upgrade-count 0) (set! mortgage-value (+ mortgage-value (/ (* 4 build-house) 2.0) (/ build-hotel 2.0))) (set! property-owner ""))]
            [else (begin (set! rent rent0) (set! upgrade-count 0) (set! mortgage-value (+ mortgage-value (/ (* 4 build-house) 2.0) (/ build-hotel 2.0))) (set! property-owner ""))]))))


(define objects
  (map (lambda (x) (new standard-property% [property-name x]))  str-lst))
(define boxes (make-hash  (zip str-lst objects)))
(define (member? u l)
  (not (equal? #f (member u l))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Detailing of property objects on board;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-field! upgrade-count (hash-ref boxes "box12") 6)
(set-field! upgrade-count (hash-ref boxes "box28") 6)

;(set-field! build-hotel (hash-ref boxes "box0") "white")
(set-field! build-hotel (hash-ref boxes "box1") 100)
;(set-field! build-hotel (hash-ref boxes "box2") "white")
(set-field! build-hotel (hash-ref boxes "box3") 150)
;(set-field! build-hotel (hash-ref boxes "box4") "white")
;(set-field! build-hotel (hash-ref boxes "box5") "white")
(set-field! build-hotel (hash-ref boxes "box6") 150)
;(set-field! build-hotel (hash-ref boxes "box7") "white")
(set-field! build-hotel (hash-ref boxes "box8") 100)
(set-field! build-hotel (hash-ref boxes "box9") 50)
;(set-field! build-hotel (hash-ref boxes "box10") "white")
(set-field! build-hotel (hash-ref boxes "box11") 50)
;(set-field! build-hotel (hash-ref boxes "box12") "white")
(set-field! build-hotel (hash-ref boxes "box13") 150)
(set-field! build-hotel (hash-ref boxes "box14") 100)
;(set-field! build-hotel (hash-ref boxes "box15") "white")
(set-field! build-hotel (hash-ref boxes "box16") 100)
;(set-field! build-hotel (hash-ref boxes "box17") "white")
(set-field! build-hotel (hash-ref boxes "box18") 150)
(set-field! build-hotel (hash-ref boxes "box19") 50)
;(set-field! build-hotel (hash-ref boxes "box20") "white")
(set-field! build-hotel (hash-ref boxes "box21") 100)
;(set-field! build-hotel (hash-ref boxes "box22") "white")
(set-field! build-hotel (hash-ref boxes "box23") 50)
(set-field! build-hotel (hash-ref boxes "box24") 100)
;(set-field! build-hotel (hash-ref boxes "box25") "white")
(set-field! build-hotel (hash-ref boxes "box26") 200)
(set-field! build-hotel (hash-ref boxes "box27") 150)
;(set-field! build-hotel (hash-ref boxes "box28") "white")
(set-field! build-hotel (hash-ref boxes "box29") 200)
;(set-field! build-hotel (hash-ref boxes "box30") "white")
(set-field! build-hotel (hash-ref boxes "box31") 50)
(set-field! build-hotel (hash-ref boxes "box32") 150)
;(set-field! build-hotel (hash-ref boxes "box33") "white")
(set-field! build-hotel (hash-ref boxes "box34") 200)
;(set-field! build-hotel (hash-ref boxes "box34") "white")
;(set-field! build-hotel (hash-ref boxes "box36") "white")
(set-field! build-hotel (hash-ref boxes "box37") 200)
;(set-field! build-hotel (hash-ref boxes "box38") "white")
(set-field! build-hotel (hash-ref boxes "box39") 200)

;(set-field! build-house (hash-ref boxes "box0") "white")
(set-field! build-house (hash-ref boxes "box1") 100)
;(set-field! build-house (hash-ref boxes "box2") "white")
(set-field! build-house (hash-ref boxes "box3") 150)
;(set-field! build-house (hash-ref boxes "box4") "white")
(set-field! build-house (hash-ref boxes "box5") 50)
(set-field! build-house (hash-ref boxes "box6") 150)
;(set-field! build-house (hash-ref boxes "box7") "white")
(set-field! build-house (hash-ref boxes "box8") 100)
(set-field! build-house (hash-ref boxes "box9") 50)
;(set-field! build-house (hash-ref boxes "box10") "white")
(set-field! build-house (hash-ref boxes "box11") 50)
;(set-field! build-house (hash-ref boxes "box12") "white")
(set-field! build-house (hash-ref boxes "box13") 150)
(set-field! build-house (hash-ref boxes "box14") 100)
(set-field! build-house (hash-ref boxes "box15") 50)
(set-field! build-house (hash-ref boxes "box16") 100)
;(set-field! build-house (hash-ref boxes "box17") "white")
(set-field! build-house (hash-ref boxes "box18") 150)
(set-field! build-house (hash-ref boxes "box19") 50)
;(set-field! build-house (hash-ref boxes "box20") "white")
(set-field! build-house (hash-ref boxes "box21") 100)
;(set-field! build-house (hash-ref boxes "box22") "white")
(set-field! build-house (hash-ref boxes "box23") 50)
(set-field! build-house (hash-ref boxes "box24") 100)
(set-field! build-house (hash-ref boxes "box25") 50)
(set-field! build-house (hash-ref boxes "box26") 200)
(set-field! build-house (hash-ref boxes "box27") 150)
;(set-field! build-house (hash-ref boxes "box28") "white")
(set-field! build-house (hash-ref boxes "box29") 200)
;(set-field! build-house (hash-ref boxes "box30") "white")
(set-field! build-house (hash-ref boxes "box31") 50)
(set-field! build-house (hash-ref boxes "box32") 150)
;(set-field! build-house (hash-ref boxes "box33") "white")
(set-field! build-house (hash-ref boxes "box34") 200)
(set-field! build-house (hash-ref boxes "box34") 50)
;(set-field! build-house (hash-ref boxes "box36") "white")
(set-field! build-house (hash-ref boxes "box37") 200)
;(set-field! build-house (hash-ref boxes "box38") "white")
(set-field! build-house (hash-ref boxes "box39") 200)

(set-field!  purchase-price (hash-ref boxes "box0") 0)
(set-field!  purchase-price (hash-ref boxes "box1") 200)
;(set-field!  purchase-price (hash-ref boxes "box2") "COMMUNITY CHEST")
(set-field!  purchase-price (hash-ref boxes "box3") 260)
;(set-field!  purchase-price (hash-ref boxes "box4") "INCOME TAX")
(set-field!  purchase-price (hash-ref boxes "box5") 200)
(set-field!  purchase-price (hash-ref boxes "box6") 260)
;(set-field!  purchase-price (hash-ref boxes "box7") "CHANCE")
(set-field!  purchase-price (hash-ref boxes "box8") 180)
(set-field!  purchase-price (hash-ref boxes "box9") 60)
;(set-field!  purchase-price (hash-ref boxes "box10") "JAIL")
(set-field!  purchase-price (hash-ref boxes "box11") 100)
(set-field!  purchase-price (hash-ref boxes "box12") 150)
(set-field!  purchase-price (hash-ref boxes "box13") 240)
(set-field!  purchase-price (hash-ref boxes "box14") 160)
(set-field!  purchase-price (hash-ref boxes "box15") 200)
(set-field!  purchase-price (hash-ref boxes "box16") 180)
;(set-field!  purchase-price (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field!  purchase-price (hash-ref boxes "box18") 220)
(set-field!  purchase-price (hash-ref boxes "box19") 60)
;(set-field!  purchase-price (hash-ref boxes "box20") "FREE PARKING")
(set-field!  purchase-price (hash-ref boxes "box21") 140)
;(set-field!  purchase-price (hash-ref boxes "box22") "CHANCE")
(set-field!  purchase-price (hash-ref boxes "box23") 120)
(set-field!  purchase-price (hash-ref boxes "box24") 140)
(set-field!  purchase-price (hash-ref boxes "box25") 200)
(set-field!  purchase-price (hash-ref boxes "box26") 320)
(set-field!  purchase-price (hash-ref boxes "box27") 220)
(set-field!  purchase-price (hash-ref boxes "box28") 150)
(set-field!  purchase-price (hash-ref boxes "box29") 300)
;(set-field!  purchase-price (hash-ref boxes "box30") "GO TO JAIL")
(set-field!  purchase-price (hash-ref boxes "box31") 100)
(set-field!  purchase-price (hash-ref boxes "box32") 280)
;(set-field!  purchase-price (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field!  purchase-price (hash-ref boxes "box34") 300)
(set-field!  purchase-price (hash-ref boxes "box35") 200)
;(set-field!  purchase-price (hash-ref boxes "box36") "CHANCE")
(set-field!  purchase-price (hash-ref boxes "box37") 350)
;(set-field!  purchase-price (hash-ref boxes "box38") "SUPER TAX")
(set-field!  purchase-price (hash-ref boxes "box39") 400)


;(set-field! mortgage-value (hash-ref boxes "box0") "GO")
(set-field! mortgage-value (hash-ref boxes "box1") 100)
;(set-field! mortgage-value (hash-ref boxes "box2") "COMMUNITY CHEST")
(set-field! mortgage-value (hash-ref boxes "box3") 150)
;(set-field! mortgage-value (hash-ref boxes "box4") "INCOME TAX")
(set-field! mortgage-value (hash-ref boxes "box5") 100)
(set-field! mortgage-value (hash-ref boxes "box6") 150)
;(set-field! mortgage-value (hash-ref boxes "box7") "CHANCE")
(set-field! mortgage-value (hash-ref boxes "box8") 90)
(set-field! mortgage-value (hash-ref boxes "box9") 50)
;(set-field! mortgage-value (hash-ref boxes "box10") "JAIL")
(set-field! mortgage-value (hash-ref boxes "box11") 50)
(set-field! mortgage-value (hash-ref boxes "box12") 75)
(set-field! mortgage-value (hash-ref boxes "box13") 120)
(set-field! mortgage-value (hash-ref boxes "box14") 80)
(set-field! mortgage-value (hash-ref boxes "box15") 100)
(set-field! mortgage-value (hash-ref boxes "box16") 90)
;(set-field! mortgage-value (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! mortgage-value (hash-ref boxes "box18") 110)
(set-field! mortgage-value (hash-ref boxes "box19") 50)
;(set-field! mortgage-value (hash-ref boxes "box20") "FREE PARKING")
(set-field! mortgage-value (hash-ref boxes "box21") 70)
;(set-field! mortgage-value (hash-ref boxes "box22") "CHANCE")
(set-field! mortgage-value (hash-ref boxes "box23") 60)
(set-field! mortgage-value (hash-ref boxes "box24") 70)
(set-field! mortgage-value (hash-ref boxes "box25") 100)
(set-field! mortgage-value (hash-ref boxes "box26") 200)
(set-field! mortgage-value (hash-ref boxes "box27") 110)
(set-field! mortgage-value (hash-ref boxes "box28") 75)
(set-field! mortgage-value (hash-ref boxes "box29") 200)
;(set-field! mortgage-value (hash-ref boxes "box30") "GO TO JAIL")
(set-field! mortgage-value (hash-ref boxes "box31") 50)
(set-field! mortgage-value (hash-ref boxes "box32") 150)
;(set-field! mortgage-value (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! mortgage-value (hash-ref boxes "box34") 200)
(set-field! mortgage-value (hash-ref boxes "box35") 100)
;(set-field! mortgage-value (hash-ref boxes "box36") "CHANCE")
(set-field! mortgage-value (hash-ref boxes "box37") 175)
;(set-field! mortgage-value (hash-ref boxes "box38") "SUPER TAX")
(set-field! mortgage-value (hash-ref boxes "box39") 200)

;(set-field! hotel-rent (hash-ref boxes "box0") 0)
(set-field! hotel-rent (hash-ref boxes "box1") 1000)
;(set-field! hotel-rent (hash-ref boxes "box2") 0)
(set-field! hotel-rent (hash-ref boxes "box3") 1150)
;(set-field! hotel-rent (hash-ref boxes "box4") (min 200 (quotient (get-field balance (hash-ref boxes "box4")))))
(set-field! hotel-rent (hash-ref boxes "box5") 100)
(set-field! hotel-rent (hash-ref boxes "box6") 1150)
;(set-field! hotel-rent (hash-ref boxes "box7") "CHANCE")
(set-field! hotel-rent (hash-ref boxes "box8") 950)
(set-field! hotel-rent (hash-ref boxes "box9") 360)
;(set-field! hotel-rent (hash-ref boxes "box10") "JAIL")
(set-field! hotel-rent (hash-ref boxes "box11") 550)
;(set-field! hotel-rent (hash-ref boxes "box12") "ELECTRIC COMPANY")
(set-field! hotel-rent (hash-ref boxes "box13") 1100)
(set-field! hotel-rent (hash-ref boxes "box14") 900)
(set-field! hotel-rent (hash-ref boxes "box15") 100)
(set-field! hotel-rent (hash-ref boxes "box16") 950)
;(set-field! hotel-rent (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! hotel-rent (hash-ref boxes "box18") 1050)
(set-field! hotel-rent (hash-ref boxes "box19") 250)
;(set-field! hotel-rent (hash-ref boxes "box20") "FREE PARKING")
(set-field! hotel-rent (hash-ref boxes "box21") 750)
;(set-field! hotel-rent (hash-ref boxes "box22") "CHANCE")
(set-field! hotel-rent (hash-ref boxes "box23") 600)
(set-field! hotel-rent (hash-ref boxes "box24") 750)
(set-field! hotel-rent (hash-ref boxes "box25") 100)
(set-field! hotel-rent (hash-ref boxes "box26") 1400)
(set-field! hotel-rent (hash-ref boxes "box27") 1050)
;(set-field! hotel-rent (hash-ref boxes "box28") "WATER WORKS")
(set-field! hotel-rent (hash-ref boxes "box29") 1275)
;(set-field! hotel-rent (hash-ref boxes "box30") "GO TO JAIL")
(set-field! hotel-rent (hash-ref boxes "box31") 550)
(set-field! hotel-rent (hash-ref boxes "box32") 1200)
;(set-field! hotel-rent (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! hotel-rent (hash-ref boxes "box34") 1275)
(set-field! hotel-rent (hash-ref boxes "box34") 100)
;(set-field! hotel-rent (hash-ref boxes "box36") "CHANCE")
(set-field! hotel-rent (hash-ref boxes "box37") 1500)
;(set-field! hotel-rent (hash-ref boxes "box38") "SUPER TAX")
(set-field! hotel-rent (hash-ref boxes "box39") 2000)

;(set-field! rent4 (hash-ref boxes "box0") 0)
(set-field! rent4 (hash-ref boxes "box1") 800)
;(set-field! rent4 (hash-ref boxes "box2") 0)
(set-field! rent4 (hash-ref boxes "box3") 975)
;(set-field! rent4 (hash-ref boxes "box4") (min 200 (quotient (get-field balance (hash-ref boxes "box4")))))
(set-field! rent4 (hash-ref boxes "box5") 200)
(set-field! rent4 (hash-ref boxes "box6") 975)
;(set-field! rent4 (hash-ref boxes "box7") "CHANCE")
(set-field! rent4 (hash-ref boxes "box8") 750)
(set-field! rent4 (hash-ref boxes "box9") 180)
;(set-field! rent4 (hash-ref boxes "box10") "JAIL")
(set-field! rent4 (hash-ref boxes "box11") 400)
;(set-field! rent4 (hash-ref boxes "box12") "ELECTRIC COMPANY")
(set-field! rent4 (hash-ref boxes "box13") 925)
(set-field! rent4 (hash-ref boxes "box14") 700)
(set-field! rent4 (hash-ref boxes "box15") 200)
(set-field! rent4 (hash-ref boxes "box16") 750)
;(set-field! rent4 (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! rent4 (hash-ref boxes "box18") 875)
(set-field! rent4 (hash-ref boxes "box19") 160)
;(set-field! rent4 (hash-ref boxes "box20") "FREE PARKING")
(set-field! rent4 (hash-ref boxes "box21") 625)
;(set-field! rent4 (hash-ref boxes "box22") "CHANCE")
(set-field! rent4 (hash-ref boxes "box23") 450)
(set-field! rent4 (hash-ref boxes "box24") 625)
(set-field! rent4 (hash-ref boxes "box25") 200)
(set-field! rent4 (hash-ref boxes "box26") 1200)
(set-field! rent4 (hash-ref boxes "box27") 875)
;(set-field! rent4 (hash-ref boxes "box28") "WATER WORKS")
(set-field! rent4 (hash-ref boxes "box29") 1100)
;(set-field! rent4 (hash-ref boxes "box30") "GO TO JAIL")
(set-field! rent4 (hash-ref boxes "box31") 400)
(set-field! rent4 (hash-ref boxes "box32") 1025)
;(set-field! rent4 (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! rent4 (hash-ref boxes "box34") 1100)
(set-field! rent4 (hash-ref boxes "box35") 200)
;(set-field! rent4 (hash-ref boxes "box36") "CHANCE")
(set-field! rent4 (hash-ref boxes "box37") 1300)
;(set-field! rent4 (hash-ref boxes "box38") "SUPER TAX")
(set-field! rent4 (hash-ref boxes "box39") 1700)

;(set-field! rent3 (hash-ref boxes "box0") 0)
(set-field! rent3 (hash-ref boxes "box1") 600)
;(set-field! rent3 (hash-ref boxes "box2") 0)
(set-field! rent3 (hash-ref boxes "box3") 800)
;(set-field! rent3 (hash-ref boxes "box4") (min 200 (quotient (get-field balance (hash-ref boxes "box4")))))
(set-field! rent3 (hash-ref boxes "box5") 100)
(set-field! rent3 (hash-ref boxes "box6") 800)
;(set-field! rent3 (hash-ref boxes "box7") "CHANCE")
(set-field! rent3 (hash-ref boxes "box8") 550)
(set-field! rent3 (hash-ref boxes "box9") 180)
;(set-field! rent3 (hash-ref boxes "box10") "JAIL")
(set-field! rent3 (hash-ref boxes "box11") 270)
;(set-field! rent3 (hash-ref boxes "box12") "ELECTRIC COMPANY")
(set-field! rent3 (hash-ref boxes "box13") 750)
(set-field! rent3 (hash-ref boxes "box14") 500)
(set-field! rent3 (hash-ref boxes "box15") 100)
(set-field! rent3 (hash-ref boxes "box16") 550)
;(set-field! rent3 (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! rent3 (hash-ref boxes "box18") 700)
(set-field! rent3 (hash-ref boxes "box19") 90)
;(set-field! rent3 (hash-ref boxes "box20") "FREE PARKING")
(set-field! rent3 (hash-ref boxes "box21") 450)
;(set-field! rent3 (hash-ref boxes "box22") "CHANCE")
(set-field! rent3 (hash-ref boxes "box23") 300)
(set-field! rent3 (hash-ref boxes "box24") 450)
(set-field! rent3 (hash-ref boxes "box25") 100)
(set-field! rent3 (hash-ref boxes "box26") 1000)
(set-field! rent3 (hash-ref boxes "box27") 700)
;(set-field! rent3 (hash-ref boxes "box28") "WATER WORKS")
(set-field! rent3 (hash-ref boxes "box29") 900)
;(set-field! rent3 (hash-ref boxes "box30") "GO TO JAIL")
(set-field! rent3 (hash-ref boxes "box31") 270)
(set-field! rent3 (hash-ref boxes "box32") 850)
;(set-field! rent3 (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! rent3 (hash-ref boxes "box34") 900)
(set-field! rent3 (hash-ref boxes "box35") 100)
;(set-field! rent3 (hash-ref boxes "box36") "CHANCE")
(set-field! rent3 (hash-ref boxes "box37") 1100)
;(set-field! rent3 (hash-ref boxes "box38") "SUPER TAX")
(set-field! rent3 (hash-ref boxes "box39") 1400)

(set-field! rent2 (hash-ref boxes "box0") 0)
(set-field! rent2 (hash-ref boxes "box1") 220)
(set-field! rent2 (hash-ref boxes "box2") 0)
(set-field! rent2 (hash-ref boxes "box3") 330)
;(set-field! rent2 (hash-ref boxes "box4") (min 200 (quotient (get-field balance (hash-ref boxes "box4")))))
(set-field! rent2 (hash-ref boxes "box5") 50)
(set-field! rent2 (hash-ref boxes "box6") 330)
;(set-field! rent2 (hash-ref boxes "box7") "CHANCE")
(set-field! rent2 (hash-ref boxes "box8") 200)
(set-field! rent2 (hash-ref boxes "box9") 60)
;(set-field! rent2 (hash-ref boxes "box10") "JAIL")
(set-field! rent2 (hash-ref boxes "box11") 90)
;(set-field! rent2 (hash-ref boxes "box12") "ELECTRIC COMPANY")
(set-field! rent2 (hash-ref boxes "box13") 300)
(set-field! rent2 (hash-ref boxes "box14") 180)
(set-field! rent2 (hash-ref boxes "box15") 50)
(set-field! rent2 (hash-ref boxes "box16") 200)
;(set-field! rent2 (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! rent2 (hash-ref boxes "box18") 250)
(set-field! rent2 (hash-ref boxes "box19") 30)
;(set-field! rent2 (hash-ref boxes "box20") "FREE PARKING")
(set-field! rent2 (hash-ref boxes "box21") 150)
;(set-field! rent2 (hash-ref boxes "box22") "CHANCE")
(set-field! rent2 (hash-ref boxes "box23") 100)
(set-field! rent2 (hash-ref boxes "box24") 150)
(set-field! rent2 (hash-ref boxes "box25") 50)
(set-field! rent2 (hash-ref boxes "box26") 450)
(set-field! rent2 (hash-ref boxes "box27") 250)
;(set-field! rent2 (hash-ref boxes "box28") "WATER WORKS")
(set-field! rent2 (hash-ref boxes "box29") 390)
;(set-field! rent2 (hash-ref boxes "box30") "GO TO JAIL")
(set-field! rent2 (hash-ref boxes "box31") 90)
(set-field! rent2 (hash-ref boxes "box32") 360)
;(set-field! rent2 (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! rent2 (hash-ref boxes "box34") 390)
(set-field! rent2 (hash-ref boxes "box35") 50)
;(set-field! rent2 (hash-ref boxes "box36") "CHANCE")
(set-field! rent2 (hash-ref boxes "box37") 500)
;(set-field! rent2 (hash-ref boxes "box38") "SUPER TAX")
(set-field! rent2 (hash-ref boxes "box39") 600)

;(set-field! rent1 (hash-ref boxes "box0") 0)
(set-field! rent1 (hash-ref boxes "box1") 80)
;(set-field! rent1 (hash-ref boxes "box2") 0)
(set-field! rent1 (hash-ref boxes "box3") 110)
;(set-field! rent1 (hash-ref boxes "box4") (min 200 (quotient (get-field balance (hash-ref boxes "box4")))))
(set-field! rent1 (hash-ref boxes "box5") 25)
(set-field! rent1 (hash-ref boxes "box6") 110)
;(set-field! rent1 (hash-ref boxes "box7") "CHANCE")
(set-field! rent1 (hash-ref boxes "box8") 70)
(set-field! rent1 (hash-ref boxes "box9") 20)
;(set-field! rent1 (hash-ref boxes "box10") "JAIL")
(set-field! rent1 (hash-ref boxes "box11") 30)
;(set-field! rent1 (hash-ref boxes "box12") "ELECTRIC COMPANY")
(set-field! rent1 (hash-ref boxes "box13") 100)
(set-field! rent1 (hash-ref boxes "box14") 60)
(set-field! rent1 (hash-ref boxes "box15") 25)
(set-field! rent1 (hash-ref boxes "box16") 70)
;(set-field! rent1 (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! rent1 (hash-ref boxes "box18") 90)
(set-field! rent1 (hash-ref boxes "box19") 10)
;(set-field! rent1 (hash-ref boxes "box20") "FREE PARKING")
(set-field! rent1 (hash-ref boxes "box21") 50)
;(set-field! rent1 (hash-ref boxes "box22") "CHANCE")
(set-field! rent1 (hash-ref boxes "box23") 40)
(set-field! rent1 (hash-ref boxes "box24") 50)
(set-field! rent1 (hash-ref boxes "box25") 25)
(set-field! rent1 (hash-ref boxes "box26") 150)
(set-field! rent1 (hash-ref boxes "box27") 90)
;(set-field! rent1 (hash-ref boxes "box28") "WATER WORKS")
(set-field! rent1 (hash-ref boxes "box29") 130)
;(set-field! rent1 (hash-ref boxes "box30") "GO TO JAIL")
(set-field! rent1 (hash-ref boxes "box31") 30)
(set-field! rent1 (hash-ref boxes "box32") 120)
;(set-field! rent1 (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! rent1 (hash-ref boxes "box34") 130)
(set-field! rent1 (hash-ref boxes "box35") 25)
;(set-field! rent1 (hash-ref boxes "box36") "CHANCE")
(set-field! rent1 (hash-ref boxes "box37") 175)
;(set-field! rent1 (hash-ref boxes "box38") "SUPER TAX")
(set-field! rent1 (hash-ref boxes "box39") 200)

;(set-field! rent0 (hash-ref boxes "box0") 0)
(set-field! rent0 (hash-ref boxes "box1") 16)
;(set-field! rent0 (hash-ref boxes "box2") 0)
(set-field! rent0 (hash-ref boxes "box3") 22)
;(set-field! rent0 (hash-ref boxes "box4") (min 200 (quotient (get-field balance (hash-ref boxes "box4")))))
(set-field! rent0 (hash-ref boxes "box5") 25)
(set-field! rent0 (hash-ref boxes "box6") 22)
;(set-field! rent0 (hash-ref boxes "box7") "CHANCE")
(set-field! rent0 (hash-ref boxes "box8") 14)
(set-field! rent0 (hash-ref boxes "box9") 4)
;(set-field! rent0 (hash-ref boxes "box10") "JAIL")
(set-field! rent0 (hash-ref boxes "box11") 6)
(set-field! rent0 (hash-ref boxes "box12") 50)
(set-field! rent0 (hash-ref boxes "box13") 20)
(set-field! rent0 (hash-ref boxes "box14") 12)
(set-field! rent0 (hash-ref boxes "box15") 25)
(set-field! rent0 (hash-ref boxes "box16") 14)
;(set-field! rent0 (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! rent0 (hash-ref boxes "box18") 18)
(set-field! rent0 (hash-ref boxes "box19") 2)
;(set-field! rent0 (hash-ref boxes "box20") "FREE PARKING")
(set-field! rent0 (hash-ref boxes "box21") 10)
;(set-field! rent0 (hash-ref boxes "box22") "CHANCE")
(set-field! rent0 (hash-ref boxes "box23") 8)
(set-field! rent0 (hash-ref boxes "box24") 10)
(set-field! rent0 (hash-ref boxes "box25") 25)
(set-field! rent0 (hash-ref boxes "box26") 28)
(set-field! rent0 (hash-ref boxes "box27") 18)
(set-field! rent0 (hash-ref boxes "box28") 50)
(set-field! rent0 (hash-ref boxes "box29") 26)
;(set-field! rent0 (hash-ref boxes "box30") "GO TO JAIL")
(set-field! rent0 (hash-ref boxes "box31") 6)
(set-field! rent0 (hash-ref boxes "box32") 22)
;(set-field! rent0 (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! rent0 (hash-ref boxes "box34") 26)
(set-field! rent0 (hash-ref boxes "box35") 25)
;(set-field! rent0 (hash-ref boxes "box36") "CHANCE")
(set-field! rent0 (hash-ref boxes "box37") 35)
;(set-field! rent0 (hash-ref boxes "box38") "SUPER TAX")
(set-field! rent0 (hash-ref boxes "box39") 50)

(set-field! color (hash-ref boxes "box0") "white")
(set-field! color (hash-ref boxes "box1") "orange")
(set-field! color (hash-ref boxes "box2") "white")
(set-field! color (hash-ref boxes "box3") "yellow")
(set-field! color (hash-ref boxes "box4") "white")
(set-field! color (hash-ref boxes "box5") "white")
(set-field! color (hash-ref boxes "box6") "yellow")
(set-field! color (hash-ref boxes "box7") "white")
(set-field! color (hash-ref boxes "box8") "orange")
(set-field! color (hash-ref boxes "box9") "brown")
(set-field! color (hash-ref boxes "box10") "white")
(set-field! color (hash-ref boxes "box11") "light blue")
(set-field! color (hash-ref boxes "box12") "white")
(set-field! color (hash-ref boxes "box13") "red")
(set-field! color (hash-ref boxes "box14") "pink")
(set-field! color (hash-ref boxes "box15") "white")
(set-field! color (hash-ref boxes "box16") "orange")
(set-field! color (hash-ref boxes "box17") "white")
(set-field! color (hash-ref boxes "box18") "red")
(set-field! color (hash-ref boxes "box19") "brown")
(set-field! color (hash-ref boxes "box20") "white")
(set-field! color (hash-ref boxes "box21") "pink")
(set-field! color (hash-ref boxes "box22") "white")
(set-field! color (hash-ref boxes "box23") "light blue")
(set-field! color (hash-ref boxes "box24") "pink")
(set-field! color (hash-ref boxes "box25") "white")
(set-field! color (hash-ref boxes "box26") "green")
(set-field! color (hash-ref boxes "box27") "red")
(set-field! color (hash-ref boxes "box28") "white")
(set-field! color (hash-ref boxes "box29") "green")
(set-field! color (hash-ref boxes "box30") "white")
(set-field! color (hash-ref boxes "box31") "light blue")
(set-field! color (hash-ref boxes "box32") "yellow")
(set-field! color (hash-ref boxes "box33") "white")
(set-field! color (hash-ref boxes "box34") "green")
(set-field! color (hash-ref boxes "box35") "white")
(set-field! color (hash-ref boxes "box36") "white")
(set-field! color (hash-ref boxes "box37") "blue")
(set-field! color (hash-ref boxes "box38") "white")
(set-field! color (hash-ref boxes "box39") "blue")

(set-field! property-name (hash-ref boxes "box0") "GO")
(set-field! property-name (hash-ref boxes "box1") "VINE STREET")
(set-field! property-name (hash-ref boxes "box2") "COMMUNITY CHEST")
(set-field! property-name (hash-ref boxes "box3") "COVENTRY")
(set-field! property-name (hash-ref boxes "box4") "INCOME TAX")
(set-field! property-name (hash-ref boxes "box5") "MARYLBONE STATION")
(set-field! property-name (hash-ref boxes "box6") "LEICESTER SQUARE")
(set-field! property-name (hash-ref boxes "box7") "CHANCE")
(set-field! property-name (hash-ref boxes "box8") "BOW STREET")
(set-field! property-name (hash-ref boxes "box9") "WHITESPACE ROAD")
(set-field! property-name (hash-ref boxes "box10") "JAIL")
(set-field! property-name (hash-ref boxes "box11") "THE ANGEL ISLINGTON")
(set-field! property-name (hash-ref boxes "box12") "ELECTRIC COMPANY")
(set-field! property-name (hash-ref boxes "box13") "TRAFALGAR SQUARE")
(set-field! property-name (hash-ref boxes "box14") "NORTHUMRL'D AVENUE")
(set-field! property-name (hash-ref boxes "box15") "FENCHURCH St. STATION")
(set-field! property-name (hash-ref boxes "box16") "M'BOROUGH STREET")
(set-field! property-name (hash-ref boxes "box17") "COMMUNITY CHEST")
(set-field! property-name (hash-ref boxes "box18") "FLEET STREET")
(set-field! property-name (hash-ref boxes "box19") "OLD KENT ROAD")
(set-field! property-name (hash-ref boxes "box20") "FREE PARKING")
(set-field! property-name (hash-ref boxes "box21") "WHITEHALL")
(set-field! property-name (hash-ref boxes "box22") "CHANCE")
(set-field! property-name (hash-ref boxes "box23") "PENTONVILLE ROAD")
(set-field! property-name (hash-ref boxes "box24") "PALL MALL")
(set-field! property-name (hash-ref boxes "box25") "KINGSCROSS STATION")
(set-field! property-name (hash-ref boxes "box26") "BOND STREET")
(set-field! property-name (hash-ref boxes "box27") "STRAND")
(set-field! property-name (hash-ref boxes "box28") "WATER WORKS")
(set-field! property-name (hash-ref boxes "box29") "REGENT STREET")
(set-field! property-name (hash-ref boxes "box30") "GO TO JAIL")
(set-field! property-name (hash-ref boxes "box31") "EUSTON ROAD")
(set-field! property-name (hash-ref boxes "box32") "PICCADILLY")
(set-field! property-name (hash-ref boxes "box33") "COMMUNITY CHEST")
(set-field! property-name (hash-ref boxes "box34") "OXFORD STREET")
(set-field! property-name (hash-ref boxes "box35") "LIVERPOOL ST. STATION")
(set-field! property-name (hash-ref boxes "box36") "CHANCE")
(set-field! property-name (hash-ref boxes "box37") "PARK LANE")
(set-field! property-name (hash-ref boxes "box38") "SUPER TAX")
(set-field! property-name (hash-ref boxes "box39") "MAYFAIR")

;;(set-field! image (hash-ref boxes "box0") (bitmap "images/go.png"))
;(set-field! image (hash-ref boxes "box1") (bitmap "images/vine street.jpg"))
;;(set-field! image (hash-ref boxes "box2") (bitmap "images/community chest.jpg"))
;(set-field! image (hash-ref boxes "box3") (bitmap "images/coventry street.jpg"))
;;(set-field! image (hash-ref boxes "box4") (bitmap "images/income tax.jpg"))
;(set-field! image (hash-ref boxes "box5") (bitmap "images/marylebone station.jpg"))
;(set-field! image (hash-ref boxes "box6") (bitmap "images/leicester square.jpg"))
;;(set-field! image (hash-ref boxes "box7") (bitmap "images/chance.jpg"))
;(set-field! image (hash-ref boxes "box8") (bitmap "images/bow street.jpg"))
;(set-field! image (hash-ref boxes "box9") (bitmap "images/whitechapel road.jpg"))
;;(set-field! image (hash-ref boxes "box10") (bitmap "images/jail.jpg"))
;(set-field! image (hash-ref boxes "box11") (bitmap "images/the angel islington.jpg"))
;(set-field! image (hash-ref boxes "box12") (bitmap "images/electric company.jpg"))
;(set-field! image (hash-ref boxes "box13") (bitmap "images/trafalgar square.jpg"))
;(set-field! image (hash-ref boxes "box14") (bitmap "images/nothumberland avenue.jpg"))
;(set-field! image (hash-ref boxes "box15") (bitmap "images/fenchurch station.jpg"))
;(set-field! image (hash-ref boxes "box16") (bitmap "images/marlborough street.jpg"))
;;(set-field! image (hash-ref boxes "box17") (bitmap "images/community chest.jpg"))
;(set-field! image (hash-ref boxes "box18") (bitmap "images/fleet street.jpg"))
;(set-field! image (hash-ref boxes "box19") (bitmap "images/old kent road.jpg"))
;;(set-field! image (hash-ref boxes "box20") (bitmap "images/free parking.png"))
;(set-field! image (hash-ref boxes "box21") (bitmap "images/whitehall.jpg"))
;;(set-field! image (hash-ref boxes "box22") (bitmap "images/chance.jpg"))
;(set-field! image (hash-ref boxes "box23") (bitmap "images/pentonville road.jpg"))
;(set-field! image (hash-ref boxes "box24") (bitmap "images/pall mall.jpg"))
;(set-field! image (hash-ref boxes "box25") (bitmap "images/king's cross station.jpg"))
;(set-field! image (hash-ref boxes "box26") (bitmap "images/bond street.jpg"))
;(set-field! image (hash-ref boxes "box27") (bitmap "images/strand.jpg"))
;(set-field! image (hash-ref boxes "box28") (bitmap "images/water works.jpg"))
;(set-field! image (hash-ref boxes "box29") (bitmap "images/regent street.jpg"))
;;(set-field! image (hash-ref boxes "box30") (bitmap "images/go to jail.jpg"))
;(set-field! image (hash-ref boxes "box31") (bitmap "images/euston road.jpg"))
;(set-field! image (hash-ref boxes "box32") (bitmap "images/piccadilly.jpg"))
;;(set-field! image (hash-ref boxes "box33") (bitmap "images/community chest.jpg"))
;(set-field! image (hash-ref boxes "box34") (bitmap "images/oxford street.jpg"))
;(set-field! image (hash-ref boxes "box35") (bitmap "images/liverpool street station.jpg"))
;;(set-field! image (hash-ref boxes "box36") (bitmap "images/chance.jpg"))
;(set-field! image (hash-ref boxes "box37") (bitmap "images/park lane.jpg"))
;;(set-field! image (hash-ref boxes "box38")  (bitmap "images/super tax.jpg"))
;(set-field! image (hash-ref boxes "box39") (bitmap "images/mayfair.jpg"))

(set-field! co-ordinates (hash-ref boxes "box0") '(cons 88.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box1") '(cons 88.5 799.5) )
(set-field! co-ordinates (hash-ref boxes "box2") '(cons 88.5 724.5) )
(set-field! co-ordinates (hash-ref boxes "box3") '(cons 88.5 649.5) )
(set-field! co-ordinates (hash-ref boxes "box4") '(cons 88.5 574.5) )
(set-field! co-ordinates (hash-ref boxes "box5") '(cons 88.5 499.5) )
(set-field! co-ordinates (hash-ref boxes "box6") '(cons 88.5 424.5) )
(set-field! co-ordinates (hash-ref boxes "box7") '(cons 88.5 349.5) )
(set-field! co-ordinates (hash-ref boxes "box8") '(cons 88.5 274.5) )
(set-field! co-ordinates (hash-ref boxes "box9") '(cons 88.5 199.5) )
(set-field! co-ordinates (hash-ref boxes "box10") '(cons 88.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box11") '(cons 197.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box12") '(cons 272.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box13") '(cons 347.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box14") '(cons 422.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box15") '(cons 497.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box16") '(cons 572.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box17") '(cons 647.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box18") '(cons 722.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box19") '(cons 797.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box20") '(cons 906.5 90.5) )
(set-field! co-ordinates (hash-ref boxes "box21") '(cons 906.5 199.5) )
(set-field! co-ordinates (hash-ref boxes "box22") '(cons 906.5 274.5) )
(set-field! co-ordinates (hash-ref boxes "box23") '(cons 906.5 349.5) )
(set-field! co-ordinates (hash-ref boxes "box24") '(cons 906.5 424.5) )
(set-field! co-ordinates (hash-ref boxes "box25") '(cons 906.5 499.5) )
(set-field! co-ordinates (hash-ref boxes "box26") '(cons 906.5 574.5) )
(set-field! co-ordinates (hash-ref boxes "box27") '(cons 906.5 649.5) )
(set-field! co-ordinates (hash-ref boxes "box28") '(cons 906.5 724.5) )
(set-field! co-ordinates (hash-ref boxes "box29") '(cons 906.5 799.5) )
(set-field! co-ordinates (hash-ref boxes "box30") '(cons 906.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box31") '(cons 797.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box32") '(cons 722.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box33") '(cons 647.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box34") '(cons 572.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box35") '(cons 497.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box36") '(cons 422.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box37") '(cons 347.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box38") '(cons 272.5 908.5) )
(set-field! co-ordinates (hash-ref boxes "box39") '(cons 197.5 908.5) )

(define (mode lnum)
  (let loop ((lst lnum)         ; list to traverse
             (max-counter 0)    ; number of times the mode appears
             (max-current #f))  ; the mode
    (if (null? lst)             ; if the list is empty
        max-current             ; return the mode
        (let ((n (count (lambda (x) (equal? x (car lst))) lnum))) ; # of times current element appears
          (if (> n max-counter) ; if it appears more times
              (loop (cdr lst) n (car lst)) ; then we found a new maximum
              (loop (cdr lst) max-counter max-current)))))) ; else continue




(define (shuffle l)
  (let [(v (list->vector l))]
    (define temp 0)
    (define random-index 0)
    (define i 0)
    (begin (while (< i (length l))
                  (set! random-index (random 0 (length l)))
                  ;(displayln i)
                  (set! temp (vector-ref v i))
                  (vector-set! v i (vector-ref v random-index))
                  (vector-set! v random-index temp)
                  (set! i (+ i 1)))
           (vector->list v))))
(define (frequency-str alpha l)
         (frequency-helper alpha l 0))
       (define (frequency-helper alpha l counter)
             (cond [(null? l) counter]
                   [(string=? alpha (car l)) (frequency-helper alpha (cdr l) (+ counter 1))]
                   [else (frequency-helper alpha (cdr l) counter)]))